// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: spiffeconnector.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpiffeConnectorClient is the client API for SpiffeConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpiffeConnectorClient interface {
	GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
}

type spiffeConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiffeConnectorClient(cc grpc.ClientConnInterface) SpiffeConnectorClient {
	return &spiffeConnectorClient{cc}
}

func (c *spiffeConnectorClient) GetCredentials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/SpiffeConnector/GetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiffeConnectorServer is the server API for SpiffeConnector service.
// All implementations must embed UnimplementedSpiffeConnectorServer
// for forward compatibility
type SpiffeConnectorServer interface {
	GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsResponse, error)
	mustEmbedUnimplementedSpiffeConnectorServer()
}

// UnimplementedSpiffeConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedSpiffeConnectorServer struct {
}

func (UnimplementedSpiffeConnectorServer) GetCredentials(context.Context, *emptypb.Empty) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedSpiffeConnectorServer) mustEmbedUnimplementedSpiffeConnectorServer() {}

// UnsafeSpiffeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpiffeConnectorServer will
// result in compilation errors.
type UnsafeSpiffeConnectorServer interface {
	mustEmbedUnimplementedSpiffeConnectorServer()
}

func RegisterSpiffeConnectorServer(s grpc.ServiceRegistrar, srv SpiffeConnectorServer) {
	s.RegisterService(&SpiffeConnector_ServiceDesc, srv)
}

func _SpiffeConnector_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiffeConnectorServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpiffeConnector/GetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiffeConnectorServer).GetCredentials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SpiffeConnector_ServiceDesc is the grpc.ServiceDesc for SpiffeConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpiffeConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SpiffeConnector",
	HandlerType: (*SpiffeConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredentials",
			Handler:    _SpiffeConnector_GetCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spiffeconnector.proto",
}
